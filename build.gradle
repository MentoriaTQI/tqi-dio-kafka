import com.commercehub.gradle.plugin.avro.GenerateAvroJavaTask

buildscript {
    ext {
        springBootVersion = '2.5.6'
    }

    repositories {
        mavenLocal()
        mavenCentral()
        jcenter()
    }

    dependencies {
        classpath "io.spring.javaformat:spring-javaformat-gradle-plugin:0.0.15"
        classpath "org.owasp:dependency-check-gradle:5.3.2.1"
        classpath("org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion")
        classpath("com.commercehub.gradle.plugin:gradle-avro-plugin:0.17.0")
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'application'
apply plugin: 'groovy'
apply plugin: 'org.owasp.dependencycheck'
apply plugin: 'io.spring.javaformat'
apply plugin: "com.commercehub.gradle.plugin.avro-base"

group = 'br.com.tqi.dio.kafka'
sourceCompatibility = 11
targetCompatibility = 11
mainClassName = 'br.com.tqi.dio.kafka.Application'

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url = uri("https://packages.confluent.io/maven/")
    }
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    implementation("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")
    implementation('org.springframework.cloud:spring-cloud-starter-sleuth:3.0.4')
    implementation('net.logstash.logback:logstash-logback-encoder:7.0')
    compileOnly('org.projectlombok:lombok:1.18.22')
    annotationProcessor 'org.projectlombok:lombok:1.18.22'

    // Kafka
    implementation('org.apache.kafka:kafka-streams:2.8.0')
    implementation('org.springframework.kafka:spring-kafka:2.7.6')
    implementation('org.apache.avro:avro:1.11.0') { exclude group: 'org.slf4j' }
    implementation('io.confluent:kafka-avro-serializer:5.3.0') { exclude group: 'org.slf4j' }

}

test {
    useJUnitPlatform()
}

//gradle-avro-plugin setting
avro {
    //convert all string type to "java.lang.CharSequence"
    stringType = "CharSequence"
}

task generateAvro(type: GenerateAvroJavaTask) {
    //point plugin to folder with avro schemas
    source("src/main/resources/avro")
    //point plugin to folder with generated POJOs
    outputDir = file("src/main/java/avro")
}

compileJava.source(generateAvro.outputs)

compileJava.dependsOn format

//sourceSets {
//    main {
//        java.srcDirs("src/main/java", "build/generated-main-avro-java", "src/main/resources")
//    }
//}
